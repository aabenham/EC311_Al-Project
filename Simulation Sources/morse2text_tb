`timescale 1ns / 1ps


module morse2text_tb;
  reg clock;
  reg btn1, btn2, btn3,btn4,btn5;
  wire [31:0] fsm_in;
  wire [23:0] bits;

  // Instantiate the top module
  morse2text uut (
    .clock(clock),
    .btn1(btn1),
    .btn2(btn2),
    .btn3(btn3),
    .btn4(btn4),
    .btn5(btn5),
    .fsm_in(fsm_in),
    .bits(bits)
  );

  // Clock generation
  always begin
    #5 clock = ~clock; // Toggle the clock every 5 time units
  end




/*Explanation:

4 bits of "fsm_in" is entered into the decoder with 3 bits of "bits"

in this testbench I use hex for "fsm_in" and octal for "bits" since

it is easier to see the 4 bits from "fsm_in" lined up with the 

3 bits of "bits" that go into the decoder.

*/
  // Stimulus
  initial begin
    clock = 0;
    btn1 = 0;
    btn2 = 0;
    btn3 = 0;
    btn4 = 0;
    
    #10 btn4 = 1;
    #10 btn4 = 0;

    // entered A in morse, after btn3 is pressed, far right hex of fsm_in should be 2, far right octal of bits should be 2
    // since it counted two button presses
    #10 btn1 = 1; btn2 = 0; btn3 = 0; btn4 = 0; btn5 = 0;  //dot 
    #10 btn1 = 0; btn2 = 1; btn3 = 0; btn4 = 0; btn5 = 0; //dash
    #10 btn1 = 0; btn2 = 0; btn3 = 1; btn4 = 0; btn5 = 0;//expected out as A
    
    
    // enetered C in morse, after btn3 is pressed, hex in position [1] should be "a",  
    //for bits, when displayed in octal, octal in position [1] should be "4"
    //since it counted 4 button presses
    #10 btn1 = 1; btn2 = 0; btn3 = 0;btn4 = 0; //dot
    #10 btn1 = 0; btn2 = 1; btn3 = 0;btn4 = 0; //dash
    #10 btn1 = 1; btn2 = 0; btn3 = 0;btn4 = 0; //dot
    #10 btn1 = 0; btn2 = 1; btn3 = 0;btn4 = 0;  //dash
    #10 btn1 = 0; btn2 = 0; btn3 = 1;btn4 = 0;  //expected to be C
    #10 btn3 = 0;
    
    #10
    #10
    #10
    #10
    #10
    
    //checking backspace btn, should delete the most recent hex of fsm_in and most recent 
    // octal of bits
    #10 btn5 = 1;
    #10 btn5 = 0;
    //works as intended
    
    //re-enter C
    #10 btn1 = 1; btn2 = 0; btn3 = 0;btn4 = 0; //dot
    #10 btn1 = 0; btn2 = 1; btn3 = 0;btn4 = 0; //dash
    #10 btn1 = 1; btn2 = 0; btn3 = 0;btn4 = 0; //dot
    #10 btn1 = 0; btn2 = 1; btn3 = 0;btn4 = 0;  //dash
    #10 btn1 = 0; btn2 = 0; btn3 = 1;btn4 = 0;  //expected to be C
    #10 btn3 = 0;
    
    //testing functionality of reset, should delete everything visually
    //but it actually only zeros out bits instantly, then fsm_in updates after
    //btn3 is pressed or a new value is entered
    #10 btn4 = 1;
    #10 btn4 = 0;
    
    //simulating an entering of a new value
    #10 btn3 = 1;
    #10 btn3 = 0;
    
    
    //btn4 works as intended
    
    
    
    #10 btn1 = 0; btn2 = 0; btn3 = 0; btn4 = 0;
    


    #100 $finish; // Finish the simulation after 100 time units
  end

  
endmodule
